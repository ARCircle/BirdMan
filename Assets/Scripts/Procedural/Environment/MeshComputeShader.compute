#pragma kernel CSMain

struct VertexData
{
    float3 position;
    float2 uv;
};

RWStructuredBuffer<VertexData> result; 
float noiseScale;                      
float noiseStrength;                   
int gridSize;                          
float meshSize;                        
float2 globalOffset;

// ブーリアンオブジェクトの頂点データ
StructuredBuffer<float3> booleanVertices;
int booleanVertexCount;
float booleanDistance;
float booleanEffectStrength;

// パーミュテーションテーブル
static const uint permutationTable[256] = {
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 
    140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 
    247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 
    57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 
    74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 
    60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 
    65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 
    200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 
    52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 
    207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 
    119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 
    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 
    218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 
    81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 
    184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 
    222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

// 勾配ベクトルの計算
float2 gradient(int hash)
{
    hash &= 7; // 8つの勾配ベクトルを使用
    float2 grad;
    grad.x = ((hash & 1) == 0) ? 1.0 : -1.0;
    grad.y = ((hash & 2) == 0) ? 1.0 : -1.0;
    return normalize(grad);
}

// フェード関数
float fade(float t)
{
    return t * t * t * (t * (t * 6 - 15) + 10);
}

// 線形補間
float lerp(float a, float b, float t)
{
    return a + t * (b - a);
}

// ハッシュ関数: パーミュテーションテーブルからハッシュを取得
int hash(int x, int y)
{
    return permutationTable[(permutationTable[x % 256] + y) % 256];
}

// Perlin noise
float perlinNoise(float2 p) 
{
    int xi = (int)floor(p.x) & 255;
    int yi = (int)floor(p.y) & 255;

    float xf = frac(p.x);
    float yf = frac(p.y);

    float u = xf * xf * xf * (xf * (xf * 6 - 15) + 10);
    float v = yf * yf * yf * (yf * (yf * 6 - 15) + 10);

    int aa = hash(xi, yi);
    int ab = hash(xi, yi + 1);
    int ba = hash(xi + 1, yi);
    int bb = hash(xi + 1, yi + 1);

    float2 gradAA = gradient(aa);
    float2 gradAB = gradient(ab);
    float2 gradBA = gradient(ba);
    float2 gradBB = gradient(bb);

    float dotAA = dot(gradAA, float2(xf, yf));
    float dotBA = dot(gradBA, float2(xf - 1, yf));
    float dotAB = dot(gradAB, float2(xf, yf - 1));
    float dotBB = dot(gradBB, float2(xf - 1, yf - 1));

    float x1 = lerp(dotAA, dotBA, u);
    float x2 = lerp(dotAB, dotBB, u);

    return lerp(x1, x2, v);
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x > gridSize || id.y > gridSize) return;

    uint index = id.y * (gridSize + 1) + id.x;
    float stepSize = meshSize / gridSize;

    // ローカル座標の計算
    float x = (float)id.x * stepSize - meshSize / 2;
    float z = (float)id.y * stepSize - meshSize / 2;

    // グローバルオフセットの適用
    float x2 = x + globalOffset.x;
    float z2 = z + globalOffset.y;

    // Perlinノイズの計算
    float noiseValue = perlinNoise(float2(x2 / noiseScale, z2 / noiseScale));
    float y = noiseValue * noiseStrength;

    float3 currentPosition = float3(x, y, z);

    // ブーリアン処理の適用
    if (booleanVertexCount > 1)
    {
     
        for (int i = 0; i < booleanVertexCount; i++)
        {
            float3 booleanVertex = booleanVertices[i];
            float dist = distance(currentPosition, booleanVertex);
            if (dist < booleanDistance)
            {

                float effect = clamp(1.0f - (dist / booleanEffectStrength), 0.0f, 1.0f);
                y -= effect * booleanEffectStrength;
                currentPosition.y = y;
                

            }
        }
         //currentPosition = float3(0,0,0);
        
    }
   

    // 結果の書き込み
    result[index].position = currentPosition;
    result[index].uv = float2((float)id.x / (float)gridSize, (float)id.y / (float)gridSize);
}